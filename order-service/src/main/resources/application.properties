spring.application.name=order-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=update

server.port=0

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#part-6 applying event driven architecture and sending notifications
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=rabbitmq
spring.rabbitmq.password=rabbitmq

#part-4 applying circuit breaker pattern
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability= 1.0

spring.cloud.stream.bindings.notificationEventSupplier-out-0.destination=notification-events
spring.cloud.stream.source=notificationEventSupplier

#feign.circuitbreaker.alphanumeric-ids.enabled=true
#
feign.client.config.InventoryClient.read-timeout= 2000
feign.client.config.InventoryClient.connect-timeout= 1000
#spring.cloud.openfeign.circuitbreaker.group.enabled=true

resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.HttpBinClient_getBinWithDelayInSeconds_int.minimumNumberOfCalls= 10
resilience4j.circuitbreaker.instances.HttpBinClient_getBinWithDelayInSeconds_int.failureRateThreshold= 50
resilience4j.timelimiter.configs.default.timeoutDuration = 20s
#spring.cloud.loadbalancer.ribbon.enabled=false

#part-7 Applying event driven architecture using apache Kafka and sending notifications
#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.rsaad.orderservice.event.kafka.PlaceOrderEvent
