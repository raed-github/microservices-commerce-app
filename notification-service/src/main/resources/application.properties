spring.application.name=notification-service

server.port=0

#part-3 apply service discovery pattern
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.fetch-registry= true
eureka.client.register-with-eureka= true

#part-4 apply distributed tracing pattern using Sleuth and Zipkin
spring.sleuth.integration.enabled=true
spring.zipkin.base-url=http://localhost:9411/
spring.sleuth.sampler.probability=1

#part-6 Applying event driven architecture using RabbitMQ and sending notifications
spring.cloud.stream.bindings.notificationEventSupplier-in-0.destination=notification-events

#part-7 Applying event driven architecture using apache Kafka and sending notifications
#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.consumer.group-id= notificationId
spring.kafka.consumer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.producer.properties.spring.json.type.mapping=event:com.rsaad.orderservice.event.kafka.PlaceOrderEvent
